name: Node.js CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
      - development
      - staging
  pull_request_review:
    types: [submitted, edited, dismissed]

jobs:
  check-pr-branches:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - name: Check branch restrictions
        run: |
          if [[ "${{ github.event.pull_request.base.ref }}" == "main" && "${{ github.event.pull_request.head.ref }}" == "development" ]] || 
             [[ "${{ github.event.pull_request.base.ref }}" == "development" && "${{ github.event.pull_request.head.ref }}" == "staging" ]] || 
             [[ "${{ github.event.pull_request.base.ref }}" == "staging" && "${{ github.event.pull_request.head.ref }}" == "main" ]] || 
             [[ "${{ github.event.pull_request.base.ref }}" == "development" && "${{ github.event.pull_request.head.ref }}" == "main" ]]; then
            echo "PR between restricted branches"
            exit 1
          fi

  ci:
    needs: check-pr-branches
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request_review.state == 'approved' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

  cd:
    needs: ci
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Set up environment variables
        run: |
          echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV
      
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      
      - name: Build container image
        run: docker build -t ${{ secrets.REGISTRY_NAME }}/${{ env.BRANCH_NAME }}:$(echo $GITHUB_SHA | head -c7) .
      
      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200
      
      - name: Push image to DigitalOcean Container Registry
        run: docker push ${{ secrets.REGISTRY_NAME }}/${{ env.BRANCH_NAME }}:$(echo $GITHUB_SHA | head -c7)
      
      - name: Update deployment file
        run: TAG=$(echo $GITHUB_SHA | head -c7) && sed -i 's|<IMAGE>|${{ secrets.REGISTRY_NAME }}/${{ env.BRANCH_NAME }}:'${TAG}'|' $GITHUB_WORKSPACE/config/deployment.yml && sed -i 's|<NAME>|${{ env.BRANCH_NAME }}|' $GITHUB_WORKSPACE/config/deployment.yml

      - name: Update service file
        run: sed -i 's|<NAME>|${{ env.BRANCH_NAME }}|' $GITHUB_WORKSPACE/config/service.yml
        
      
      - name: Save DigitalOcean kubeconfig with short-lived credentials
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.CLUSTER_NAME }}
      
      - name: Check if LEASE_APPLICATION namespace exists
        run: |
          if ! kubectl get namespace LEASE_APPLICATION; then
            kubectl create namespace LEASE_APPLICATION
          fi

          
      - name: Check if Service Exists
        id: service-check
        run: |
          if kubectl get svc <NAME>; then
            echo "::set-output name=exists::true"
          else
            echo "::set-output name=exists::false"
          fi

      
      - name: Deploy to ${{ env.BRANCH_NAME }} namespace
        run: kubectl apply -f $GITHUB_WORKSPACE/config/deployment.yml -n LEASE_APPLICATION

      - name: Apply Service if it does not exist
        if: steps.service-check.outputs.exists == 'false'
        run: kubectl apply -f $GITHUB_WORKSPACE/config/service.yaml  -n LEASE_APPLICATION
      
      - name: Verify deployment
        run: |
          if ! kubectl rollout status deployment/${{ env.BRANCH_NAME }} -n LEASE_APPLICATION; then
            doctl registry repository delete ${{ secrets.REGISTRY_NAME }}/${{ env.BRANCH_NAME }}:$(echo $GITHUB_SHA | head -c7) --force
            exit 1
          fi

      - name: List all tags for the image
        run: |
          IMAGE_NAME=${{ secrets.REGISTRY_NAME }}/${{ env.BRANCH_NAME }}
          doctl registry repository list-tags $IMAGE_NAME --format Tag --no-header
      
              
      - name: Delete previous image from DigitalOcean Container Registry
        run: |
          IMAGE_NAME=${{ secrets.REGISTRY_NAME }}/${{ env.BRANCH_NAME }}
          IMAGE_TAG=$(echo $GITHUB_SHA | head -c7)
          PREVIOUS_TAG=$(doctl registry repository list-tags ${{ env.BRANCH_NAME }} --format Tag --no-header | grep -v $IMAGE_TAG | tail -n 1)
          if [ -n "$PREVIOUS_TAG" ]; then
            doctl registry repository delete $IMAGE_NAME:$PREVIOUS_TAG --force
          fi

